{"pages":[{"title":"About","text":"SCNU理工男，喜爱各种电子产品博客用来记录学习，生活","link":"/about/index.html"},{"title":"categories","text":"Linux考研杂谈","link":"/categories/index.html"},{"title":"tags","text":"Linux爬虫","link":"/tags/index.html"}],"posts":[{"title":"Debian10开启BBR加速","text":"BBR是谷歌的一个开源的解决网络拥塞算法的，需要Linux的内核版本大于4.9才能开启。 查看Linux内核版本： 1uname -a 修改系统变量： 12echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf 保存生效： 1sysctl -p 查看是否开启成功： 12sysctl net.ipv4.tcp_available_congestion_controlnet.ipv4.tcp_available_congestion_control = bbr cubic reno","link":"/2021/01/21/Debian10%E5%BC%80%E5%90%AFBBR%E5%8A%A0%E9%80%9F/"},{"title":"Typecho博客","text":"前一阵子腾讯云的数字域名有优惠，于是剁手了一个数字域名。有了域名，突然想起来还有个虚拟主机闲置着，就想随手搭建一个博客（虽然我很少写东西hhh）。博客系统最终选择的是typecho，非常轻量，简洁，一顿操作猛如虎之后，博客也顺利搭建成功。以后我会在这里更新我的文章！","link":"/2020/03/17/Typecho%E5%8D%9A%E5%AE%A2/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/01/12/hello-world/"},{"title":"在Linux下修改Swap分区大小","text":"今天无意间看到主机的swap的大小只有131M，而且占用也快满了，想要修改swap分区大小，改为两倍系统物理内存的大小（1024M），以满足日常使用的需求。 swap分区：通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。 使用free命令查看系统内存的使用情况： [root@PC ~]# free -m total used free shared buff/cache available Mem: 493 184 112 6 195 289 Swap: 131 0 131 可以看到我们这台主机内存有493M，而swap分区只有131M（我之前重新挂载过一次分区，所以当前使用为0M） 使用swapon命令查看swap分区： [root@PC ~]# swapon -s Filename Type Size Used Priority /swap file 135164 0 -2 可以看到swap分区的位置为/swap 使用swapoff命令关闭swap分区： [root@PC ~]# swapoff -a 再次查看系统内存： [root@PC ~]# free -m total used free shared buff/cache available Mem: 493 212 41 6 239 261 Swap: 0 0 0 可以看到swap分区的空间已经变成了0删除当前的swap分区文件： [root@PC ~]# rm /swap rm: remove regular file '/swap'? y 重新创建swap分区：dd命令的部分参数如下：参数bs为一个块的大小，参数count为总的块数 [root@PC ~]# dd if=/dev/zero of=/swap count=1024 bs=1M 1024+0 records in 1024+0 records out 1073741824 bytes (1.1 GB, 1.0 GiB) copied, 3.59162 s, 299 MB/s 查看swap分区： [root@PC ~]# ls / | grep swap swap 可以看到swap已经成功重新创建 为swap文件赋予权限（文件所有者的读写权限）： [root@PC ~]# chmod 600 /swap 查看swap文件权限： [root@PC ~]# ls -lh /swap -rw------- 1 root root 1.0G Mar 17 23:41 /swap 挂载swap分区： [root@PC ~]# mkswap /swap Setting up swapspace version 1, size = 1024 MiB (1073737728 bytes) no label, UUID=c3d2c1dc-adb9-468e-8ab4-fbdc8fead879 打开swap分区： [root@PC ~]# swapon /swap 设置开机启动： [root@PC ~]# vi /etc/fstab 在文件末尾添加如下代码并保存： /swap none swap sw 0 0 再次查看系统内存使用情况： [root@PC ~]# free -m total used free shared buff/cache available Mem: 493 214 6 6 272 259 Swap: 1023 0 1023 swap分区文件大小的修改就完成了！","link":"/2020/03/18/%E5%9C%A8Linux%E4%B8%8B%E4%BF%AE%E6%94%B9Swap%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/"},{"title":"爬虫获取京东手机销售数据","text":"目前消费市场上的手机品牌多种多样，比较常见的有：苹果，三星，华为，小米，VIVO，OPPO，一加，魅族，努比亚，联想，锤子，诺基亚，索尼，中兴，华硕，黑鲨等，计划通过简单的Python代码爬取京东以“手机”为关键词的前100页商品（搜索上限就是100页）的商品信息，价格，商家，评价数（销量的另一种体现），和链接，并对数据进行清洗和处理，最后存储到MySQL数据库中。 Q:为什么调查的电商平台选择京东？A: 一开始想选择淘宝作为调查的平台，因为淘宝的商品种类更加丰富。但是淘宝有非常完备的反爬虫机制，简单的爬虫程序很难爬取到有效的数据，而京东对于爬虫没有很严格的限制，选择京东作为调查的电商平台可以减少代码的工作量。 淘宝的刷单现象较为严重，而京东的刷单现象则不是很普遍，选择京东作为调查的电商平台可以让获取的数据更加真实。 京东的售后体系，特别是京东自营的商店，在售后方面更加有保障，而智能手机属于贵重物品，相比于淘宝，更多人倾向在京东购买手机。 数据采集首先对京东的网页链接进行分析：经过简化后，这个链接也可以正常使用，然后对链接的关键字进行分析：Keyword参数：就是搜索的关键字，这里我们要搜索的关键字就是“手机”。Enc参数：就是encoding编码的关键字，是网页默认的utf-8，不加这个参数会出现乱码。Page参数：是当前搜索页面的页数的关键字，第二页显示page=3，规律就是每增加一页，page会增加2，所以页数=page*2-1。接下来定位网页html代码中商品元素的位置，通过浏览器的开发者工具可以直接定位到商品元素的位置：爬取的信息选择存储到本地的MySQL数据库中，新建数据库包含的列有：爬取商品的序号，手机的名称，手机的价格，手机的评价数（销量）,销售手机的商家，手机的链接。其中，序号为表的主键，价格和评价数选择使用INT类型存储，其他均采用VARCHAR类型存储。数据库的结构如下图：接下来就可以编写代码，主要通过python下的selenium库来对网页进行爬取，其中代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990from selenium import webdriverfrom selenium.common.exceptions import TimeoutExceptionfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitfrom multiprocessing.pool import Poolfrom urllib.parse import quotefrom pyquery import PyQuery as pqimport timeimport pymysqlimport cryptographya=1options = webdriver.ChromeOptions()options.add_argument('--headless')browser = webdriver.Chrome(chrome_options=options)wait = WebDriverWait(browser,10)KEYWORD = '手机'#搜索的关键字是手机headers = { 'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36', 'x-requested-with':'XMLHttpRequest'#用于翻页}def index_page(page): print('正在爬取第', page, '页') try: url = 'https://search.jd.com/Search?keyword={}&amp;enc=utf-8&amp;page={}'.format(quote(KEYWORD),page*2-1) print(url) browser.get(url) time.sleep(0.5) return browser.page_source # browser.close() except TimeoutException: index_page(page)def connect_mysql(sql):#写入到MySQL数据库 coon = pymysql.connect(host='localhost',port=3306,user='root',passwd ='123456',db ='phone',charset ='utf8') cur = coon.cursor() cur.execute(sql) if sql.strip()[:6].upper() == 'SELECT': res = cur.fetchall() else: coon.commit() res = 'ok' cur.close() coon.close() return resdef get_products(html): global a # html = browser.page_source doc = pq(html) items = doc('#J_goodsList &gt; ul &gt; li').items()#全部信息都在ul下的li中 for item in items: product = { '价格': item.find('div &gt; div.p-price &gt; strong &gt; i').text(),#J_goodsList &gt; ul &gt; li:nth-child(1) &gt; div &gt; div.p-price &gt; strong &gt; i '评价数': item.find('div &gt; div.p-commit &gt; strong &gt; a').text(),#J_goodsList &gt; ul &gt; li:nth-child(1) &gt; div &gt; div.p-commit &gt; strong &gt; a '商家': item.find('div.p-shop &gt; span &gt; a').text(),#J_goodsList &gt; ul &gt; li:nth-child(1) &gt; div &gt; div.p-shop &gt; span &gt; a '手机名称': item.find('div &gt; div.p-name.p-name-type-2 &gt; a &gt; em').text(),#J_goodsList &gt; ul &gt; li:nth-child(1) &gt; div &gt; div.p-name.p-name-type-2 &gt; a &gt; em '链接': item.find('div &gt; div.p-img &gt; a').attr('href'),#J_goodsList &gt; ul &gt; li:nth-child(1) &gt; div &gt; div.p-img &gt; a } price=product['价格'] phone=product['手机名称'] mark=product['评价数'] seller=product['商家'] link=product['链接'] if price.isdigit(): continue#如果价格不是数字，跳过本次循环 mark=mark.replace('+','')#单位标准化 if '万' in mark: mark=mark.replace('万','')#单位标准化 mark=float(mark) mark=mark*10000 else: mark=float(mark) print(product) sql=&quot;INSERT INTO `phone`.`phone_list` (`序号`,`手机名称`, `价格`, `评价数(销量)`, `商家`, `链接`) VALUES ('&quot;+str(a)+&quot;', '&quot;+phone+&quot;', '&quot;+price+&quot;','&quot;+str(mark)+&quot;','&quot;+seller+&quot;','&quot;+link+&quot;');&quot; connect_mysql(sql) a+=1 if __name__ == '__main__': for i in range(1,101):#循环100次 get_products(index_page(i)) 最后一共爬取到了3000个商品，存储到数据库后的效果如下：数据采集的任务完成。 Ps：本工作完成时间为：2019-12-11，相应的数据可能与现在不同，需注意时效性。","link":"/2020/06/05/%E7%88%AC%E8%99%AB%E8%8E%B7%E5%8F%96%E4%BA%AC%E4%B8%9C%E6%89%8B%E6%9C%BA%E9%94%80%E5%94%AE%E6%95%B0%E6%8D%AE/"},{"title":"给博客加上HTTPS","text":"前言Trojan可以让自己的博客加上Https访问。 下面这张图是部分文档的介绍：它可以仅仅是一个Https的服务器，监听系统的443端口，展开Tls握手，握手成功后，如果判断是其他流量，就会打开一个隧道，将流量转发到预设好的端口，这个端口就可以处理解密后的Http流量了。下面这张图可以更好地理解这样的工作模式：当客户端访问服务器时，服务端监听443端口，如果是客户端的合法流量，那么就由Trojan处理，再访问互联网，如果不是客户端的合法流量（比如浏览器访问服务器上的Https网站），那么在进行Https流量解密之后，服务端会将Http流量转发给nginx监听的80端口，交给Nginx处理，从而使用户可以正常访问服务器上的网站。 开始操作 首先确认自己的博客能够正常地通过Http访问 申请一张Https证书，并准备好证书和密钥文件,放在你的服务器的合适位置 安装Trojan，使用Github上的安装脚本通过curl命令安装： 1sudo bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)&quot; 或者通过wget命令安装： 1sudo bash -c &quot;$(wget -O- https://raw.githubusercontent.com/trojan-gfw/trojan-quickstart/master/trojan-quickstart.sh)&quot; 修改/usr/local/etc/trojan/config.json文件 设置trojan自动启动 12systemctl start trojansystemctl enable trojan 编辑Typecho站点根目录下的文件config.inc.php加入下面一行配置： 12/** 开启HTTPS */define('__TYPECHO_SECURE__',true); 注意：Chrome内核的浏览器有不安全提示的时候，需要找到主题目录下面的comments.php文件再将其中的$this&gt;commentUrl()，替换为： 1echo str_replace(&quot;http&quot;,&quot;https&quot;,$this-&gt;commentUrl()); 最后保存。","link":"/2020/03/31/%E7%BB%99%E5%8D%9A%E5%AE%A2%E5%8A%A0%E4%B8%8AHTTPS/"},{"title":"考研初试复盘","text":"距离考研初试已经过去了整整一个星期了，好好休息了一个星期之后，大致看了一下答案，复盘一下初试的情况。 政治今年的政治大题我愿称之为肖秀荣第五套卷，肖秀荣永远的神。试题基本都是肖四的前两套卷，比去年反映的“肖秀荣翻车”要好太多了，基本都是一拿到题目就是默写，最后再抄点材料。选择题做的也可以，因为没有官方答案，各种版本的答案有少许出入，但是应该还是有40分的。这样算下来政治大概率有70+，希望能再高点，能达到75就很好了。 英语今年的英语二感觉中规中矩，不算太难也不算很简单。完型错了四道扣2分，阅读全对，七选五错了一道扣2分，翻译粗略估计扣2分，作文感觉写得不是很好，25分的作文就当扣8分吧，算下来应该是有85+，政治和英语两科加起来能有160就很满意了。 数学今年的数学二也是算比较简单的一年了，但是我有点菜，选填就错了3道题，整整15分啊，意味着我的总分是从135开始算起了，但是我的大题都做对了嘻嘻。我的策略还是有点问题，我做选择和填空题遇到没有思路的都是直接先跳过，然后都做完了就开始做大题，因为这次的大题不是很难，但是运算还是需要一定的时间，而且有一道大题还稍微卡了一下。所以最后还剩下不到30分钟，做两道选择两道填空，最后一道选择和填空属实难顶，想不到简单的方法的话只能死算，简单地说就是体力劳动，还不能算错。最后一道选择我算了三次三个三阶矩阵相乘，最后一道填空我把四阶带字母的行列式展开了算系数，真的人没了，万幸两个体力劳动都没错。错的题都是自己觉得很弱智的，就不细说，其实就是太菜了，尽力就好。因为今年的考试算是简单的一年，考前订的120分的目标应该稳得，可以冲一波130。 408今年的408大题有点奇奇怪怪，特别是数据结构，算法题十几年第一次考了图的算法题，直接打了我一个措手不及，最后做的算法题感觉也拿不了什么分。另一道大题考了一道排序算法的大题，我印象中以前也没有这么考过，总之大题就是感觉有点拉跨。选择题还好，不会的比较少，感觉比前几年简单，因为这一门的答案是最不完善的，所以也只是随便看了一下，不估分。 接下来初试结束之后，还有不少事情要做，主要是毕业设计和准备面试这一块，二月下旬公布初试成绩，三月就要进行面试了，时间紧迫，不能放松，加油。","link":"/2021/01/18/%E8%80%83%E7%A0%94%E5%88%9D%E8%AF%95%E5%A4%8D%E7%9B%98/"},{"title":"镁光C9BJZ内存超频","text":"前一阵子美亚的镁光C9BJZ颗粒内存有折扣，买了两套，一套自己升级用，一套挂在闲鱼出掉了。 超频平台： CPU:Ryzen5 3600 主板:Asus X470i 显卡:Rx5700 电源:SF450 内存:Crucial 16G*2 超频用到的相关软件： Ryzen Calculator Zen Timings Aida64 Typhoon Burner 可以看到最新版本的台风已经可以正确识别C9BJZ颗粒，但我也没有拆开马甲确认。 最后顺利超到了3800Mhz 16-20-20-14-36，再往上Zen2架构就会分频，效能反而会下降。 但是玩游戏却发现不是很稳定，会不时有闪退蓝屏等现象，说明还不能很稳定运行，于是稍微放松小参来到了3800Mhz 18-20-20-18-38 真1T，玩了几个小时PUBG均运行正常，从Aida64的跑分也可以看出和之前并没有很大的差别，日常使用稳定最重要，超频工作完成。 最后附上一张所有参数的图片：","link":"/2021/02/02/%E9%95%81%E5%85%89C9BJZ%E5%86%85%E5%AD%98%E8%B6%85%E9%A2%91/"},{"title":"在Openwrt下使用Kms激活","text":"自己使用的路由器是Openwrt系统的，最近重装了系统发现Windows和Office都变成了未激活状态，突然想起来路由器里自带Kms服务器可以激活，顺便将自己的操作记录下来，以后再重装就不需要去百度了。 Windows激活： 在Powershell输入slmgr /upk卸载原来自带密钥 输入slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX，使用的是Win10专业版的Kms 输入slmgr /skms 192.168.1.1，将Kms的服务器地址设为自己的路由器地址 输入slmgr /ato，激活Windows Office激活： 在Powershell进入安装Office的目录，cd “C:\\Program Files\\Microsoft Office\\Office16” 输入cscript ospp.vbs /sethst:192.168.50.1 输入cscript ospp.vbs /act 现在Windows和Office都激活成功啦！ 参考链接： http://www.vjsun.com/629.html https://github.com/netnr/kms","link":"/2021/02/20/%E5%9C%A8Openwrt%E4%B8%8B%E4%BD%BF%E7%94%A8Kms%E6%BF%80%E6%B4%BB/"},{"title":"考研复试复盘","text":"初试388，压线进入复试，最后拟录取。 初试388，机试第四组rank43在测试设备，上机考试，还有面试这三个阶段我都遇到了同一个男老师。所以在面试的时候，我一进会议室，那个男老师一下子就认出我来，说：”xx，又是你”（我心想怎么这么巧？？？）而且最后也是那个男老师通知我面试完了，就叫他boss男老师吧。最开始的是英语面试，大概5分钟，自我介绍+4个问题英语面和自我介绍有关，我自我介绍里说水过论文，是学校足球队的，后面的英文问题就问了相关内容1.你在学校足球队打的什么位置central base(说错了，中后卫应该是center back，不过老师大概听懂了，点了点头）2.你最喜欢的球星Cristiano Ronaldo3.你对Ai有什么看法If we can’t control the machine mind, things will go wrong,… blablawe should give the machine moral concept … blabla4.介绍你的城市（提前准备了）My hometown is GZ, which is the capital of GuandDong province and it is one of the largest cities in China. GZ has the third longest river in China, Zhujiang river runs through the city. The city is warm in winter and quite hot in summer with a lot of rains in spring and summer. There are many interesting attractions in the city, such as GZ tower, GuangDong museum and Baiyun mountain, the people in GZ are very friendly and you will never be disappointed if you pay a visit to GZ. 专业面试：专业面主要问了本科成绩单高分的专业课程，问课程的相关知识，还问了一些实践课程做了什么。我本科是科班数据库方向，数据库有关的课比较多。老师会先看你上过哪些课，然后说：“我看你上过xxx课”，然后接着问你那些课相关的知识1.为什么数据库先写日志再写数据老师说了三个字母的缩写，但我没听清，就说不懂，老师就解释了缩写是什么意思。我听明白了，就说如果先写数据再写日志，那么发生错误了就无法进行回滚，blabla…2.面向对象继承特点？封装继承多态3.你比较熟悉的编程语言C++，Java，Python4.C++和Python的区别我说一个是编译型语言，一个是解释型语言。C++运行快，Python编写方便老师还不满意，让我继续答，我说了半天，听到Python运行需要虚拟机，老师似乎满意了，就过了。5.软件编程有哪些模型我答瀑布模型，问瀑布模型有什么，当时紧张想不到只能sorry，然后又问极限编程我也不会，随便答了个（我是大数据专业，没想到会问我软工的问题，确实没怎么准备，窒息）6.解释C++的封装继承多态7.死锁的概念、原因和预防的方法408问题，直接答8.数据库系统设计课程干了什么blabla9.毕业设计做的什么blabla10.做过什么项目Python爬虫项目，简单解释了一下我的工作 插曲：专业面试问到一半的时候，boss男老师好像看到了我的初试成绩，笑了笑，问我：你好像是最后一分进复试的，你觉得你还有希望吗？ 我就说：如果有机会我一定会努力去争取（当时心有点凉）。然后又问我：昨天的机试发挥的怎么样，我说：发挥的还不错。整个专业面试下来我感觉一直在疯狂输出，虽然有一些问题答不出来，但我把我知道的都说了，努力展现自己。面试完其实有点沮丧，感觉希望好像不是很大，但最后居然真的给我绝杀了。","link":"/2021/04/08/%E8%80%83%E7%A0%94%E5%A4%8D%E8%AF%95%E5%A4%8D%E7%9B%98/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"爬虫","slug":"爬虫","link":"/tags/%E7%88%AC%E8%99%AB/"},{"name":"内存","slug":"内存","link":"/tags/%E5%86%85%E5%AD%98/"},{"name":"Https","slug":"Https","link":"/tags/Https/"},{"name":"Openwrt","slug":"Openwrt","link":"/tags/Openwrt/"},{"name":"考研","slug":"考研","link":"/tags/%E8%80%83%E7%A0%94/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"考研","slug":"考研","link":"/categories/%E8%80%83%E7%A0%94/"}]}